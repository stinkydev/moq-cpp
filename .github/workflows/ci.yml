name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
      
    - name: Install CMake
      uses: lukka/get-cmake@latest
      
    - name: Install Ninja (Ubuntu)
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install -y ninja-build
      
    - name: Install Ninja (macOS)
      if: runner.os == 'macOS'
      run: brew install ninja
      
    - name: Configure CMake
      run: cmake -B build -DCMAKE_BUILD_TYPE=Release
      
    - name: Build
      run: cmake --build build --parallel
      
    - name: List build artifacts
      run: |
        echo "Build directory contents:"
        ls -la build/
        echo "Rust target contents:"
        find build/rust-target -name "*moq_ffi*" || echo "No moq_ffi files found"
      shell: bash
      
    - name: Test
      run: |
        cd build
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          ./moq_example.exe
        else
          ./moq_example
        fi
      shell: bash

  rust-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ubuntu-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ubuntu-cargo-
      
    - name: Run Rust tests
      run: cargo test --manifest-path moq-ffi/Cargo.toml
      
    - name: Check Rust formatting
      run: cargo fmt --manifest-path moq-ffi/Cargo.toml --check
      
    - name: Run Clippy
      run: cargo clippy --manifest-path moq-ffi/Cargo.toml -- -D warnings
