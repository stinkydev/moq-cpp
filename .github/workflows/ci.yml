name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
      
    - name: Install CMake
      uses: lukka/get-cmake@latest
      
    - name: Install Ninja (Ubuntu)
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install -y ninja-build
      
    - name: Install Ninja (macOS)
      if: runner.os == 'macOS'
      run: brew install ninja
      
    - name: Configure CMake
      run: cmake -B build -DCMAKE_BUILD_TYPE=Release
      
    - name: Debug headers before build
      run: |
        echo "Current working directory:"
        pwd
        echo "C++ headers in cpp/include/moq/:"
        ls -la cpp/include/moq/ || echo "C++ headers not found"
        echo "Checking if directories exist:"
        test -d cpp/include/moq && echo "cpp/include/moq exists" || echo "cpp/include/moq missing"
        echo "Full cpp/include structure:"
        find cpp/include -type f -name "*.h" || echo "No header files found"
      shell: bash
      
    - name: Build Rust library first (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        cd moq-ffi
        cargo build --release --target-dir ../build/rust-target
        echo "Rust build completed, checking headers:"
        ls -la ../build/rust-target/release/moq-ffi/include/ || echo "No FFI headers found"
      
    - name: Build
      run: cmake --build build --parallel
      
    - name: List build artifacts
      run: |
        echo "Build directory contents:"
        ls -la build/
        echo "Rust target contents:"
        find build/rust-target -name "*moq_ffi*" || echo "No moq_ffi files found"
      shell: bash
      
    - name: Test
      run: |
        cd build
        echo "Contents of build directory:"
        ls -la
        echo "Looking for test executable:"
        find . -name "moq_test*" -type f || echo "No moq_test files found"
        
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          if [ -f "./moq_test.exe" ]; then
            echo "Running moq_test.exe..."
            ./moq_test.exe
          elif [ -f "./Release/moq_test.exe" ]; then
            echo "Running Release/moq_test.exe..."
            ./Release/moq_test.exe
          elif [ -f "./Debug/moq_test.exe" ]; then
            echo "Running Debug/moq_test.exe..."
            ./Debug/moq_test.exe
          else
            echo "ERROR: moq_test.exe not found in expected locations"
            exit 1
          fi
        else
          if [ -f "./moq_test" ]; then
            echo "Running moq_test..."
            ./moq_test
          else
            echo "ERROR: moq_test not found"
            exit 1
          fi
        fi
        
        echo "MOQ Test completed successfully!"
      shell: bash

  rust-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ubuntu-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ubuntu-cargo-
      
    - name: Run Rust tests
      run: cargo test --manifest-path moq-ffi/Cargo.toml
      
    - name: Check Rust formatting
      run: cargo fmt --manifest-path moq-ffi/Cargo.toml --check
      
    - name: Run Clippy
      run: cargo clippy --manifest-path moq-ffi/Cargo.toml -- -D warnings
